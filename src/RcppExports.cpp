// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "gonoHistoryMatching_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SIGN
double SIGN(double a, double b);
RcppExport SEXP _gonoHistoryMatching_SIGN(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(SIGN(a, b));
    return rcpp_result_gen;
END_RCPP
}
// nrerror
void nrerror(std::string error_text);
RcppExport SEXP _gonoHistoryMatching_nrerror(SEXP error_textSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type error_text(error_textSEXP);
    nrerror(error_text);
    return R_NilValue;
END_RCPP
}
// vector1
double* vector1(long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_vector1(SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    rcpp_result_gen = Rcpp::wrap(vector1(nl, nh));
    return rcpp_result_gen;
END_RCPP
}
// ivector
int* ivector(long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_ivector(SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    rcpp_result_gen = Rcpp::wrap(ivector(nl, nh));
    return rcpp_result_gen;
END_RCPP
}
// cvector
unsigned char* cvector(long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_cvector(SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    rcpp_result_gen = Rcpp::wrap(cvector(nl, nh));
    return rcpp_result_gen;
END_RCPP
}
// lvector
unsigned long* lvector(long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_lvector(SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    rcpp_result_gen = Rcpp::wrap(lvector(nl, nh));
    return rcpp_result_gen;
END_RCPP
}
// dvector
double* dvector(long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_dvector(SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    rcpp_result_gen = Rcpp::wrap(dvector(nl, nh));
    return rcpp_result_gen;
END_RCPP
}
// matrix
double** matrix(long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_matrix(SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix(nrl, nrh, ncl, nch));
    return rcpp_result_gen;
END_RCPP
}
// dmatrix
double** dmatrix(long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_dmatrix(SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    rcpp_result_gen = Rcpp::wrap(dmatrix(nrl, nrh, ncl, nch));
    return rcpp_result_gen;
END_RCPP
}
// imatrix
int** imatrix(long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_imatrix(SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    rcpp_result_gen = Rcpp::wrap(imatrix(nrl, nrh, ncl, nch));
    return rcpp_result_gen;
END_RCPP
}
// submatrix
double** submatrix(double** a, long oldrl, long oldrh, long oldcl, long oldch, long newrl, long newcl);
RcppExport SEXP _gonoHistoryMatching_submatrix(SEXP aSEXP, SEXP oldrlSEXP, SEXP oldrhSEXP, SEXP oldclSEXP, SEXP oldchSEXP, SEXP newrlSEXP, SEXP newclSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type a(aSEXP);
    Rcpp::traits::input_parameter< long >::type oldrl(oldrlSEXP);
    Rcpp::traits::input_parameter< long >::type oldrh(oldrhSEXP);
    Rcpp::traits::input_parameter< long >::type oldcl(oldclSEXP);
    Rcpp::traits::input_parameter< long >::type oldch(oldchSEXP);
    Rcpp::traits::input_parameter< long >::type newrl(newrlSEXP);
    Rcpp::traits::input_parameter< long >::type newcl(newclSEXP);
    rcpp_result_gen = Rcpp::wrap(submatrix(a, oldrl, oldrh, oldcl, oldch, newrl, newcl));
    return rcpp_result_gen;
END_RCPP
}
// convert_matrix
double** convert_matrix(double* a, long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_convert_matrix(SEXP aSEXP, SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double* >::type a(aSEXP);
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_matrix(a, nrl, nrh, ncl, nch));
    return rcpp_result_gen;
END_RCPP
}
// f3tensor
double*** f3tensor(long nrl, long nrh, long ncl, long nch, long ndl, long ndh);
RcppExport SEXP _gonoHistoryMatching_f3tensor(SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP, SEXP ndlSEXP, SEXP ndhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    Rcpp::traits::input_parameter< long >::type ndl(ndlSEXP);
    Rcpp::traits::input_parameter< long >::type ndh(ndhSEXP);
    rcpp_result_gen = Rcpp::wrap(f3tensor(nrl, nrh, ncl, nch, ndl, ndh));
    return rcpp_result_gen;
END_RCPP
}
// free_vector
void free_vector(double* v, long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_free_vector(SEXP vSEXP, SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double* >::type v(vSEXP);
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    free_vector(v, nl, nh);
    return R_NilValue;
END_RCPP
}
// free_ivector
void free_ivector(int* v, long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_free_ivector(SEXP vSEXP, SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int* >::type v(vSEXP);
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    free_ivector(v, nl, nh);
    return R_NilValue;
END_RCPP
}
// free_cvector
void free_cvector(unsigned char* v, long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_free_cvector(SEXP vSEXP, SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned char* >::type v(vSEXP);
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    free_cvector(v, nl, nh);
    return R_NilValue;
END_RCPP
}
// free_lvector
void free_lvector(unsigned long* v, long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_free_lvector(SEXP vSEXP, SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long* >::type v(vSEXP);
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    free_lvector(v, nl, nh);
    return R_NilValue;
END_RCPP
}
// free_dvector
void free_dvector(double* v, long nl, long nh);
RcppExport SEXP _gonoHistoryMatching_free_dvector(SEXP vSEXP, SEXP nlSEXP, SEXP nhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double* >::type v(vSEXP);
    Rcpp::traits::input_parameter< long >::type nl(nlSEXP);
    Rcpp::traits::input_parameter< long >::type nh(nhSEXP);
    free_dvector(v, nl, nh);
    return R_NilValue;
END_RCPP
}
// free_matrix
void free_matrix(double** m, long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_free_matrix(SEXP mSEXP, SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type m(mSEXP);
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    free_matrix(m, nrl, nrh, ncl, nch);
    return R_NilValue;
END_RCPP
}
// free_dmatrix
void free_dmatrix(double** m, long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_free_dmatrix(SEXP mSEXP, SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type m(mSEXP);
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    free_dmatrix(m, nrl, nrh, ncl, nch);
    return R_NilValue;
END_RCPP
}
// free_imatrix
void free_imatrix(int** m, long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_free_imatrix(SEXP mSEXP, SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int** >::type m(mSEXP);
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    free_imatrix(m, nrl, nrh, ncl, nch);
    return R_NilValue;
END_RCPP
}
// free_submatrix
void free_submatrix(double** b, long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_free_submatrix(SEXP bSEXP, SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type b(bSEXP);
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    free_submatrix(b, nrl, nrh, ncl, nch);
    return R_NilValue;
END_RCPP
}
// free_convert_matrix
void free_convert_matrix(double** b, long nrl, long nrh, long ncl, long nch);
RcppExport SEXP _gonoHistoryMatching_free_convert_matrix(SEXP bSEXP, SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type b(bSEXP);
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    free_convert_matrix(b, nrl, nrh, ncl, nch);
    return R_NilValue;
END_RCPP
}
// free_f3tensor
void free_f3tensor(double*** t, long nrl, long nrh, long ncl, long nch, long ndl, long ndh);
RcppExport SEXP _gonoHistoryMatching_free_f3tensor(SEXP tSEXP, SEXP nrlSEXP, SEXP nrhSEXP, SEXP nclSEXP, SEXP nchSEXP, SEXP ndlSEXP, SEXP ndhSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double*** >::type t(tSEXP);
    Rcpp::traits::input_parameter< long >::type nrl(nrlSEXP);
    Rcpp::traits::input_parameter< long >::type nrh(nrhSEXP);
    Rcpp::traits::input_parameter< long >::type ncl(nclSEXP);
    Rcpp::traits::input_parameter< long >::type nch(nchSEXP);
    Rcpp::traits::input_parameter< long >::type ndl(ndlSEXP);
    Rcpp::traits::input_parameter< long >::type ndh(ndhSEXP);
    free_f3tensor(t, nrl, nrh, ncl, nch, ndl, ndh);
    return R_NilValue;
END_RCPP
}
// rkck
void rkck(double** PopulationX, parameters& Parameters, psa_parameters* psaParameters, int race, int gender, int sexBehs, int age, double y[], double dydx[], int n, double x, double h, double yout[], double yerr[], double year, double month, void (*derivs)(double**, parameters&, psa_parameters*, int, int, int, int, double, double[], double[], double, double, int, int), int ns, int np);
RcppExport SEXP _gonoHistoryMatching_rkck(SEXP PopulationXSEXP, SEXP ParametersSEXP, SEXP psaParametersSEXP, SEXP raceSEXP, SEXP genderSEXP, SEXP sexBehsSEXP, SEXP ageSEXP, SEXP y[]SEXP, SEXP dydx[]SEXP, SEXP nSEXP, SEXP xSEXP, SEXP hSEXP, SEXP yout[]SEXP, SEXP yerr[]SEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP int)SEXP, SEXP nsSEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type PopulationX(PopulationXSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< psa_parameters* >::type psaParameters(psaParametersSEXP);
    Rcpp::traits::input_parameter< int >::type race(raceSEXP);
    Rcpp::traits::input_parameter< int >::type gender(genderSEXP);
    Rcpp::traits::input_parameter< int >::type sexBehs(sexBehsSEXP);
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type y[](y[]SEXP);
    Rcpp::traits::input_parameter< double >::type dydx[](dydx[]SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type yout[](yout[]SEXP);
    Rcpp::traits::input_parameter< double >::type yerr[](yerr[]SEXP);
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< void (*derivs)(double**, parameters&, psa_parameters*, int, int, int, int, double, double[], double[], double, double, int, >::type int)(int)SEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    rkck(PopulationX, Parameters, psaParameters, race, gender, sexBehs, age, y[], dydx[], n, x, h, yout[], yerr[], year, month, int), ns, np);
    return R_NilValue;
END_RCPP
}
// rkqs
void rkqs(double** PopulationX, parameters& Parameters, psa_parameters* psaParameters, int race, int gender, int sexBehs, int age, double y[], double dydx[], int n, double* x, double htry, double eps, double yscal[], double* hdid, double* hnext, double year, double month, void (*derivs)(double**, parameters&, psa_parameters* , int, int, int, int, double, double[], double[], double, double, int, int), int ns, int np);
RcppExport SEXP _gonoHistoryMatching_rkqs(SEXP PopulationXSEXP, SEXP ParametersSEXP, SEXP psaParametersSEXP, SEXP raceSEXP, SEXP genderSEXP, SEXP sexBehsSEXP, SEXP ageSEXP, SEXP y[]SEXP, SEXP dydx[]SEXP, SEXP nSEXP, SEXP xSEXP, SEXP htrySEXP, SEXP epsSEXP, SEXP yscal[]SEXP, SEXP hdidSEXP, SEXP hnextSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP int)SEXP, SEXP nsSEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type PopulationX(PopulationXSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< psa_parameters* >::type psaParameters(psaParametersSEXP);
    Rcpp::traits::input_parameter< int >::type race(raceSEXP);
    Rcpp::traits::input_parameter< int >::type gender(genderSEXP);
    Rcpp::traits::input_parameter< int >::type sexBehs(sexBehsSEXP);
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type y[](y[]SEXP);
    Rcpp::traits::input_parameter< double >::type dydx[](dydx[]SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double* >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type htry(htrySEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type yscal[](yscal[]SEXP);
    Rcpp::traits::input_parameter< double* >::type hdid(hdidSEXP);
    Rcpp::traits::input_parameter< double* >::type hnext(hnextSEXP);
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< void (*derivs)(double**, parameters&, psa_parameters* , int, int, int, int, double, double[], double[], double, double, int, >::type int)(int)SEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    rkqs(PopulationX, Parameters, psaParameters, race, gender, sexBehs, age, y[], dydx[], n, x, htry, eps, yscal[], hdid, hnext, year, month, int), ns, np);
    return R_NilValue;
END_RCPP
}
// sumVector
double sumVector(double* Population1, parameters& Parameters, int i_start, int i_end, int j_start, int j_end, int k_start, int k_end, int l_start, int l_end, int m_start, int m_end, int d_start, int d_end);
RcppExport SEXP _gonoHistoryMatching_sumVector(SEXP Population1SEXP, SEXP ParametersSEXP, SEXP i_startSEXP, SEXP i_endSEXP, SEXP j_startSEXP, SEXP j_endSEXP, SEXP k_startSEXP, SEXP k_endSEXP, SEXP l_startSEXP, SEXP l_endSEXP, SEXP m_startSEXP, SEXP m_endSEXP, SEXP d_startSEXP, SEXP d_endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double* >::type Population1(Population1SEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< int >::type i_start(i_startSEXP);
    Rcpp::traits::input_parameter< int >::type i_end(i_endSEXP);
    Rcpp::traits::input_parameter< int >::type j_start(j_startSEXP);
    Rcpp::traits::input_parameter< int >::type j_end(j_endSEXP);
    Rcpp::traits::input_parameter< int >::type k_start(k_startSEXP);
    Rcpp::traits::input_parameter< int >::type k_end(k_endSEXP);
    Rcpp::traits::input_parameter< int >::type l_start(l_startSEXP);
    Rcpp::traits::input_parameter< int >::type l_end(l_endSEXP);
    Rcpp::traits::input_parameter< int >::type m_start(m_startSEXP);
    Rcpp::traits::input_parameter< int >::type m_end(m_endSEXP);
    Rcpp::traits::input_parameter< int >::type d_start(d_startSEXP);
    Rcpp::traits::input_parameter< int >::type d_end(d_endSEXP);
    rcpp_result_gen = Rcpp::wrap(sumVector(Population1, Parameters, i_start, i_end, j_start, j_end, k_start, k_end, l_start, l_end, m_start, m_end, d_start, d_end));
    return rcpp_result_gen;
END_RCPP
}
// newInfections
double newInfections(double* y, parameters& Parameters, int race, int gender, int sexBeh, int sexAct, int age, int np);
RcppExport SEXP _gonoHistoryMatching_newInfections(SEXP ySEXP, SEXP ParametersSEXP, SEXP raceSEXP, SEXP genderSEXP, SEXP sexBehSEXP, SEXP sexActSEXP, SEXP ageSEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double* >::type y(ySEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< int >::type race(raceSEXP);
    Rcpp::traits::input_parameter< int >::type gender(genderSEXP);
    Rcpp::traits::input_parameter< int >::type sexBeh(sexBehSEXP);
    Rcpp::traits::input_parameter< int >::type sexAct(sexActSEXP);
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    rcpp_result_gen = Rcpp::wrap(newInfections(y, Parameters, race, gender, sexBeh, sexAct, age, np));
    return rcpp_result_gen;
END_RCPP
}
// derivs
void derivs(double** PopulationX, parameters& Parameters, psa_parameters* psaParameters, int race, int gender, int sexBehs, int age, double x, double* y, double* dydx, double year, double month, int ns, int np);
RcppExport SEXP _gonoHistoryMatching_derivs(SEXP PopulationXSEXP, SEXP ParametersSEXP, SEXP psaParametersSEXP, SEXP raceSEXP, SEXP genderSEXP, SEXP sexBehsSEXP, SEXP ageSEXP, SEXP xSEXP, SEXP ySEXP, SEXP dydxSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP nsSEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type PopulationX(PopulationXSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< psa_parameters* >::type psaParameters(psaParametersSEXP);
    Rcpp::traits::input_parameter< int >::type race(raceSEXP);
    Rcpp::traits::input_parameter< int >::type gender(genderSEXP);
    Rcpp::traits::input_parameter< int >::type sexBehs(sexBehsSEXP);
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double* >::type y(ySEXP);
    Rcpp::traits::input_parameter< double* >::type dydx(dydxSEXP);
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    derivs(PopulationX, Parameters, psaParameters, race, gender, sexBehs, age, x, y, dydx, year, month, ns, np);
    return R_NilValue;
END_RCPP
}
// odeint
void odeint(double** PopulationX, parameters& Parameters, psa_parameters* psaParameters, int race, int gender, int sexBehs, int age, double* ystart, double year, double month, int size, int ns, int np);
RcppExport SEXP _gonoHistoryMatching_odeint(SEXP PopulationXSEXP, SEXP ParametersSEXP, SEXP psaParametersSEXP, SEXP raceSEXP, SEXP genderSEXP, SEXP sexBehsSEXP, SEXP ageSEXP, SEXP ystartSEXP, SEXP yearSEXP, SEXP monthSEXP, SEXP sizeSEXP, SEXP nsSEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type PopulationX(PopulationXSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< psa_parameters* >::type psaParameters(psaParametersSEXP);
    Rcpp::traits::input_parameter< int >::type race(raceSEXP);
    Rcpp::traits::input_parameter< int >::type gender(genderSEXP);
    Rcpp::traits::input_parameter< int >::type sexBehs(sexBehsSEXP);
    Rcpp::traits::input_parameter< int >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double* >::type ystart(ystartSEXP);
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    odeint(PopulationX, Parameters, psaParameters, race, gender, sexBehs, age, ystart, year, month, size, ns, np);
    return R_NilValue;
END_RCPP
}
// loadInitialPopulation
void loadInitialPopulation(std::string inputPath, double*** PopulationX, parameters& Parameters, int NumbParallel, double initialInfection);
RcppExport SEXP _gonoHistoryMatching_loadInitialPopulation(SEXP inputPathSEXP, SEXP PopulationXSEXP, SEXP ParametersSEXP, SEXP NumbParallelSEXP, SEXP initialInfectionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputPath(inputPathSEXP);
    Rcpp::traits::input_parameter< double*** >::type PopulationX(PopulationXSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< int >::type NumbParallel(NumbParallelSEXP);
    Rcpp::traits::input_parameter< double >::type initialInfection(initialInfectionSEXP);
    loadInitialPopulation(inputPath, PopulationX, Parameters, NumbParallel, initialInfection);
    return R_NilValue;
END_RCPP
}
// loadDemographics
void loadDemographics(std::string inputPath, parameters& Parameters);
RcppExport SEXP _gonoHistoryMatching_loadDemographics(SEXP inputPathSEXP, SEXP ParametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputPath(inputPathSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    loadDemographics(inputPath, Parameters);
    return R_NilValue;
END_RCPP
}
// loadParameters
void loadParameters(std::string inputPath, parameters& Parameters, psa_parameters* psaParameters, int NumbSim);
RcppExport SEXP _gonoHistoryMatching_loadParameters(SEXP inputPathSEXP, SEXP ParametersSEXP, SEXP psaParametersSEXP, SEXP NumbSimSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputPath(inputPathSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< psa_parameters* >::type psaParameters(psaParametersSEXP);
    Rcpp::traits::input_parameter< int >::type NumbSim(NumbSimSEXP);
    loadParameters(inputPath, Parameters, psaParameters, NumbSim);
    return R_NilValue;
END_RCPP
}
// loadCalibratioTargets
void loadCalibratioTargets(std::string inputPath, parameters& Parameters);
RcppExport SEXP _gonoHistoryMatching_loadCalibratioTargets(SEXP inputPathSEXP, SEXP ParametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputPath(inputPathSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    loadCalibratioTargets(inputPath, Parameters);
    return R_NilValue;
END_RCPP
}
// loadCalibrationParameters
void loadCalibrationParameters(std::string inputPath, parameters& Parameters, int numbParallel);
RcppExport SEXP _gonoHistoryMatching_loadCalibrationParameters(SEXP inputPathSEXP, SEXP ParametersSEXP, SEXP numbParallelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputPath(inputPathSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< int >::type numbParallel(numbParallelSEXP);
    loadCalibrationParameters(inputPath, Parameters, numbParallel);
    return R_NilValue;
END_RCPP
}
// runModelDynamics
void runModelDynamics(double** PopulationX, parameters& Parameters, psa_parameters* psaParameters, int iter, int np);
RcppExport SEXP _gonoHistoryMatching_runModelDynamics(SEXP PopulationXSEXP, SEXP ParametersSEXP, SEXP psaParametersSEXP, SEXP iterSEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type PopulationX(PopulationXSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< psa_parameters* >::type psaParameters(psaParametersSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    runModelDynamics(PopulationX, Parameters, psaParameters, iter, np);
    return R_NilValue;
END_RCPP
}
// updatedCalibrationParameters
void updatedCalibrationParameters(std::string filename, parameters& Parameters);
RcppExport SEXP _gonoHistoryMatching_updatedCalibrationParameters(SEXP filenameSEXP, SEXP ParametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    updatedCalibrationParameters(filename, Parameters);
    return R_NilValue;
END_RCPP
}
// saveCalibratedIncidence
void saveCalibratedIncidence(double** Population, std::string filename, parameters& Parameters);
RcppExport SEXP _gonoHistoryMatching_saveCalibratedIncidence(SEXP PopulationSEXP, SEXP filenameSEXP, SEXP ParametersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type Population(PopulationSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    saveCalibratedIncidence(Population, filename, Parameters);
    return R_NilValue;
END_RCPP
}
// saveIncidence
void saveIncidence(double** population, std::string filename, parameters& Parameters, int runTime);
RcppExport SEXP _gonoHistoryMatching_saveIncidence(SEXP populationSEXP, SEXP filenameSEXP, SEXP ParametersSEXP, SEXP runTimeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type population(populationSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< int >::type runTime(runTimeSEXP);
    saveIncidence(population, filename, Parameters, runTime);
    return R_NilValue;
END_RCPP
}
// saveTrajectories
void saveTrajectories(double** population, std::string filename, parameters& Parameters, int runTime);
RcppExport SEXP _gonoHistoryMatching_saveTrajectories(SEXP populationSEXP, SEXP filenameSEXP, SEXP ParametersSEXP, SEXP runTimeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double** >::type population(populationSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< parameters& >::type Parameters(ParametersSEXP);
    Rcpp::traits::input_parameter< int >::type runTime(runTimeSEXP);
    saveTrajectories(population, filename, Parameters, runTime);
    return R_NilValue;
END_RCPP
}
// runmodel
int runmodel(Rcpp::List inputs);
RcppExport SEXP _gonoHistoryMatching_runmodel(SEXP inputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type inputs(inputsSEXP);
    rcpp_result_gen = Rcpp::wrap(runmodel(inputs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gonoHistoryMatching_SIGN", (DL_FUNC) &_gonoHistoryMatching_SIGN, 2},
    {"_gonoHistoryMatching_nrerror", (DL_FUNC) &_gonoHistoryMatching_nrerror, 1},
    {"_gonoHistoryMatching_vector1", (DL_FUNC) &_gonoHistoryMatching_vector1, 2},
    {"_gonoHistoryMatching_ivector", (DL_FUNC) &_gonoHistoryMatching_ivector, 2},
    {"_gonoHistoryMatching_cvector", (DL_FUNC) &_gonoHistoryMatching_cvector, 2},
    {"_gonoHistoryMatching_lvector", (DL_FUNC) &_gonoHistoryMatching_lvector, 2},
    {"_gonoHistoryMatching_dvector", (DL_FUNC) &_gonoHistoryMatching_dvector, 2},
    {"_gonoHistoryMatching_matrix", (DL_FUNC) &_gonoHistoryMatching_matrix, 4},
    {"_gonoHistoryMatching_dmatrix", (DL_FUNC) &_gonoHistoryMatching_dmatrix, 4},
    {"_gonoHistoryMatching_imatrix", (DL_FUNC) &_gonoHistoryMatching_imatrix, 4},
    {"_gonoHistoryMatching_submatrix", (DL_FUNC) &_gonoHistoryMatching_submatrix, 7},
    {"_gonoHistoryMatching_convert_matrix", (DL_FUNC) &_gonoHistoryMatching_convert_matrix, 5},
    {"_gonoHistoryMatching_f3tensor", (DL_FUNC) &_gonoHistoryMatching_f3tensor, 6},
    {"_gonoHistoryMatching_free_vector", (DL_FUNC) &_gonoHistoryMatching_free_vector, 3},
    {"_gonoHistoryMatching_free_ivector", (DL_FUNC) &_gonoHistoryMatching_free_ivector, 3},
    {"_gonoHistoryMatching_free_cvector", (DL_FUNC) &_gonoHistoryMatching_free_cvector, 3},
    {"_gonoHistoryMatching_free_lvector", (DL_FUNC) &_gonoHistoryMatching_free_lvector, 3},
    {"_gonoHistoryMatching_free_dvector", (DL_FUNC) &_gonoHistoryMatching_free_dvector, 3},
    {"_gonoHistoryMatching_free_matrix", (DL_FUNC) &_gonoHistoryMatching_free_matrix, 5},
    {"_gonoHistoryMatching_free_dmatrix", (DL_FUNC) &_gonoHistoryMatching_free_dmatrix, 5},
    {"_gonoHistoryMatching_free_imatrix", (DL_FUNC) &_gonoHistoryMatching_free_imatrix, 5},
    {"_gonoHistoryMatching_free_submatrix", (DL_FUNC) &_gonoHistoryMatching_free_submatrix, 5},
    {"_gonoHistoryMatching_free_convert_matrix", (DL_FUNC) &_gonoHistoryMatching_free_convert_matrix, 5},
    {"_gonoHistoryMatching_free_f3tensor", (DL_FUNC) &_gonoHistoryMatching_free_f3tensor, 7},
    {"_gonoHistoryMatching_rkck", (DL_FUNC) &_gonoHistoryMatching_rkck, 19},
    {"_gonoHistoryMatching_rkqs", (DL_FUNC) &_gonoHistoryMatching_rkqs, 21},
    {"_gonoHistoryMatching_sumVector", (DL_FUNC) &_gonoHistoryMatching_sumVector, 14},
    {"_gonoHistoryMatching_newInfections", (DL_FUNC) &_gonoHistoryMatching_newInfections, 8},
    {"_gonoHistoryMatching_derivs", (DL_FUNC) &_gonoHistoryMatching_derivs, 14},
    {"_gonoHistoryMatching_odeint", (DL_FUNC) &_gonoHistoryMatching_odeint, 13},
    {"_gonoHistoryMatching_loadInitialPopulation", (DL_FUNC) &_gonoHistoryMatching_loadInitialPopulation, 5},
    {"_gonoHistoryMatching_loadDemographics", (DL_FUNC) &_gonoHistoryMatching_loadDemographics, 2},
    {"_gonoHistoryMatching_loadParameters", (DL_FUNC) &_gonoHistoryMatching_loadParameters, 4},
    {"_gonoHistoryMatching_loadCalibratioTargets", (DL_FUNC) &_gonoHistoryMatching_loadCalibratioTargets, 2},
    {"_gonoHistoryMatching_loadCalibrationParameters", (DL_FUNC) &_gonoHistoryMatching_loadCalibrationParameters, 3},
    {"_gonoHistoryMatching_runModelDynamics", (DL_FUNC) &_gonoHistoryMatching_runModelDynamics, 5},
    {"_gonoHistoryMatching_updatedCalibrationParameters", (DL_FUNC) &_gonoHistoryMatching_updatedCalibrationParameters, 2},
    {"_gonoHistoryMatching_saveCalibratedIncidence", (DL_FUNC) &_gonoHistoryMatching_saveCalibratedIncidence, 3},
    {"_gonoHistoryMatching_saveIncidence", (DL_FUNC) &_gonoHistoryMatching_saveIncidence, 4},
    {"_gonoHistoryMatching_saveTrajectories", (DL_FUNC) &_gonoHistoryMatching_saveTrajectories, 4},
    {"_gonoHistoryMatching_runmodel", (DL_FUNC) &_gonoHistoryMatching_runmodel, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gonoHistoryMatching(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
